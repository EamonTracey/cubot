#include "state.h"

constexpr int kPowersOfTwo[] = {1,  2,   4,   8,   16,   32,
                                64, 128, 256, 512, 1024, 2048};
constexpr int kPowersOfThree[] = {1, 3, 9, 27, 81, 243, 729, 2187};

constexpr int kNumberOfBits[2048] = {
    0, 1, 1, 2,  1, 2,  2,  3, 1, 2, 2, 3, 2, 3, 3, 4,  1, 2, 2, 3, 2, 3, 3, 4,
    2, 3, 3, 4,  3, 4,  4,  5, 1, 2, 2, 3, 2, 3, 3, 4,  2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  1, 2, 2, 3, 2, 3, 3, 4,
    2, 3, 3, 4,  3, 4,  4,  5, 2, 3, 3, 4, 3, 4, 4, 5,  3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 1, 2, 2, 3, 2, 3, 3, 4,  2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  2, 3, 3, 4, 3, 4, 4, 5,
    3, 4, 4, 5,  4, 5,  5,  6, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  1, 2, 2, 3, 2, 3, 3, 4,
    2, 3, 3, 4,  3, 4,  4,  5, 2, 3, 3, 4, 3, 4, 4, 5,  3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 2, 3, 3, 4, 3, 4, 4, 5,  3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5,  4, 5,  5,  6, 4, 5, 5, 6, 5, 6, 6, 7,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 1, 2, 2, 3, 2, 3, 3, 4,  2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  2, 3, 3, 4, 3, 4, 4, 5,
    3, 4, 4, 5,  4, 5,  5,  6, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  2, 3, 3, 4, 3, 4, 4, 5,
    3, 4, 4, 5,  4, 5,  5,  6, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    3, 4, 4, 5,  4, 5,  5,  6, 4, 5, 5, 6, 5, 6, 6, 7,  4, 5, 5, 6, 5, 6, 6, 7,
    5, 6, 6, 7,  6, 7,  7,  8, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  4, 5, 5, 6, 5, 6, 6, 7,
    5, 6, 6, 7,  6, 7,  7,  8, 5, 6, 6, 7, 6, 7, 7, 8,  6, 7, 7, 8, 7, 8, 8, 9,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  4, 5, 5, 6, 5, 6, 6, 7,
    5, 6, 6, 7,  6, 7,  7,  8, 5, 6, 6, 7, 6, 7, 7, 8,  6, 7, 7, 8, 7, 8, 8, 9,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 5, 6, 6, 7, 6, 7, 7, 8,  6, 7, 7, 8, 7, 8, 8, 9,
    6, 7, 7, 8,  7, 8,  8,  9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4,
    2, 3, 3, 4,  3, 4,  4,  5, 2, 3, 3, 4, 3, 4, 4, 5,  3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 2, 3, 3, 4, 3, 4, 4, 5,  3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5,  4, 5,  5,  6, 4, 5, 5, 6, 5, 6, 6, 7,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 2, 3, 3, 4, 3, 4, 4, 5,  3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5,  4, 5,  5,  6, 4, 5, 5, 6, 5, 6, 6, 7,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    3, 4, 4, 5,  4, 5,  5,  6, 4, 5, 5, 6, 5, 6, 6, 7,  4, 5, 5, 6, 5, 6, 6, 7,
    5, 6, 6, 7,  6, 7,  7,  8, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    5, 6, 6, 7,  6, 7,  7,  8, 6, 7, 7, 8, 7, 8, 8, 9,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    5, 6, 6, 7,  6, 7,  7,  8, 6, 7, 7, 8, 7, 8, 8, 9,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 6, 7, 7, 8, 7, 8, 8, 9,  7, 8, 8, 9, 8, 9, 9, 10,
    2, 3, 3, 4,  3, 4,  4,  5, 3, 4, 4, 5, 4, 5, 5, 6,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 3, 4, 4, 5, 4, 5, 5, 6,  4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  4, 5, 5, 6, 5, 6, 6, 7,
    5, 6, 6, 7,  6, 7,  7,  8, 5, 6, 6, 7, 6, 7, 7, 8,  6, 7, 7, 8, 7, 8, 8, 9,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 5, 6, 6, 7, 6, 7, 7, 8,  6, 7, 7, 8, 7, 8, 8, 9,
    6, 7, 7, 8,  7, 8,  8,  9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6,
    4, 5, 5, 6,  5, 6,  6,  7, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 4, 5, 5, 6, 5, 6, 6, 7,  5, 6, 6, 7, 6, 7, 7, 8,
    5, 6, 6, 7,  6, 7,  7,  8, 6, 7, 7, 8, 7, 8, 8, 9,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 6, 7, 7, 8, 7, 8, 8, 9,  7, 8, 8, 9, 8, 9, 9, 10,
    4, 5, 5, 6,  5, 6,  6,  7, 5, 6, 6, 7, 6, 7, 7, 8,  5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 5, 6, 6, 7, 6, 7, 7, 8,  6, 7, 7, 8, 7, 8, 8, 9,
    6, 7, 7, 8,  7, 8,  8,  9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8,
    6, 7, 7, 8,  7, 8,  8,  9, 6, 7, 7, 8, 7, 8, 8, 9,  7, 8, 8, 9, 8, 9, 9, 10,
    6, 7, 7, 8,  7, 8,  8,  9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10,
    8, 9, 9, 10, 9, 10, 10, 11};

constexpr int kNPermuteR[12][12] = {
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {1, 4, 12, 24, 24, 24, 24, 24, 24, 24, 24, 24},
    {1, 5, 20, 60, 120, 120, 120, 120, 120, 120, 120, 120},
    {1, 6, 30, 120, 360, 720, 720, 720, 720, 720, 720, 720},
    {1, 7, 42, 210, 840, 2520, 5040, 5040, 5040, 5040, 5040, 5040},
    {1, 8, 56, 336, 1680, 6720, 20160, 40320, 40320, 40320, 40320, 40320},
    {1, 9, 72, 504, 3024, 15120, 60480, 181440, 362880, 362880, 362880, 362880},
    {1, 10, 90, 720, 5040, 30240, 151200, 604800, 1814400, 3628800, 3628800,
     3628800},
    {1, 11, 110, 990, 7920, 55440, 332640, 1663200, 6652800, 19958400, 39916800,
     39916800}};

constexpr int kNChooseR[12][12] = {
    {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 4, 6, 4, 1, 0, 0, 0, 0, 0, 0, 0},
    {1, 5, 10, 10, 5, 1, 0, 0, 0, 0, 0, 0},
    {1, 6, 15, 20, 15, 6, 1, 0, 0, 0, 0, 0},
    {1, 7, 21, 35, 35, 21, 7, 1, 0, 0, 0, 0},
    {1, 8, 28, 56, 70, 56, 28, 8, 1, 0, 0, 0},
    {1, 9, 36, 84, 126, 126, 84, 36, 9, 1, 0, 0},
    {1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1, 0},
    {1, 11, 55, 165, 330, 462, 462, 330, 165, 55, 11, 1}};

int CalculatePermutationState(std::vector<int> permutation, size_t n) {
    size_t k = permutation.size();

    int visited = 0;
    int state = 0;
    for (size_t i = 0; i < k; ++i) {
        int number = permutation[i];
        int lehmer = number - kNumberOfBits[visited & ((1 << number) - 1)];
        state += lehmer * kNPermuteR[n - i - 1][k - i - 1];
        visited |= 1 << number;
    }

    return state;
}

int CalculateCombinationState(std::vector<int> combination) {
    int state = 0;
    for (size_t i = 0; i < combination.size(); ++i) {
        int number = combination[i];
        state += kNChooseR[number][i + 1];
    }

    return state;
}

int CalculateEdgeOrientationState(const Cube &cube) {
    auto &edges = cube.edges();

    int state = 0;
    for (size_t i = 0; i < 11; ++i)
        state += static_cast<int>(edges[i].orientation) * kPowersOfTwo[i];

    return state;
}

int CalculateCornerOrientationState(const Cube &cube) {
    auto &corners = cube.corners();

    int state = 0;
    for (size_t i = 0; i < 7; ++i)
        state += static_cast<int>(corners[i].orientation) * kPowersOfThree[i];

    return state;
}

int CalculateEquatorialEdgeCombinationState(const Cube &cube) {
    auto &edges = cube.edges();

    std::vector<int> combination;
    for (size_t i = 0; i < 12; ++i) {
        auto &edge = edges[i];
        if (edge.solvedPosition == Cube::Edge::Position::kRightFront ||
            edge.solvedPosition == Cube::Edge::Position::kRightBack ||
            edge.solvedPosition == Cube::Edge::Position::kLeftFront ||
            edge.solvedPosition == Cube::Edge::Position::kLeftBack)
            combination.push_back(static_cast<int>(i));
    }

    int state = CalculateCombinationState(combination);

    return state;
}

int CalculateCrossState(const Cube &cube) {
    auto &edges = cube.edges();

    int orientation[4];
    int permutation[4];
    for (size_t i = 0; i < 12; ++i) {
        auto &edge = edges[i];
        if (static_cast<int>(edge.solvedPosition) < 4) {
            orientation[static_cast<int>(edge.solvedPosition)] =
                static_cast<int>(edge.orientation);
            permutation[static_cast<int>(edge.solvedPosition)] =
                static_cast<int>(i);
        }
    }

    int orientation_state = 0;
    for (size_t i = 0; i < 4; ++i)
        orientation_state += orientation[i] * kPowersOfTwo[i];
    int permutation_state = CalculatePermutationState(
        std::vector<int>(permutation, permutation + 4), 12);
    int state = orientation_state + permutation_state * 16;

    return state;
}
